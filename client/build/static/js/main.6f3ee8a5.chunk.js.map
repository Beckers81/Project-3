{"version":3,"sources":["components/Login/Login.js","pages/home/homepage.js","components/Register/register.js","App.js","registerServiceWorker.js","index.js"],"names":["Login","state","username","password","handleInputChange","name","value","_this","setState","Object","defineProperty","_this2","this","react_default","a","createElement","className","onSubmit","e","preventDefault","console","log","axios","post","objectSpread","then","response","data","catch","error","type","onChange","target","Component","Homepage","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modal","toggle","bind","assertThisInitialized","prevState","class","Button","color","size","onClick","Modal","isOpen","ModalHeader","ModalBody","Login_Login","ModalFooter","React","App","loggedIn","newUser","react_router_dom","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6f3ee8a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class Login extends Component {\n\n  state = {\n    username: '',\n    password: '',\n  }\n\n  handleInputChange = (name, value) => {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <form className=\"App\" onSubmit={ e => {\n        e.preventDefault();\n        console.log(\"Submitting form! ...Allegedly\");\n\n        axios.post('/api/users', { ...this.state })\n          .then(response => console.log(response.data))\n          .catch(error => console.error(error));\n\n      }}>\n        <input\n          type=\"text\"\n          name=\"username\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport Login from \"../../components/Login/Login\";\nimport Nav from \"../../components/navbar/Nav\";\nimport Register from \"../../components/Register/register\";\n\nclass Homepage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          modal: false\n        };\n    \n        this.toggle = this.toggle.bind(this);\n      }\n    \n    toggle() {\n        this.setState(prevState => ({\n          modal: !prevState.modal\n        }));\n      }\n    render(){\n    return (\n        <div>\n            <div class=\"horizontal-center\">\n                <h1 className=\"display-3\">Our Amazing App!</h1>\n                <p className=\"lead\">Interested in a Free Gift?</p>\n                <hr className=\"my-2\" />\n                <p>Our Home Page is Fun and Inspirational.</p>\n                <div class=\"container\">\n  </div>\n</div>\n                <p className=\"lead\">\n                <Button color=\"secondary\" size=\"lg\"onClick={this.toggle}>Login</Button>\n                <Button color=\"secondary\" size=\"lg\"onClick={this.toggle}>Register</Button>\n\n                        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                            <ModalHeader toggle={this.toggle}>Please Select An Option!</ModalHeader>\n                                <ModalBody>\n                                  <Login />\n                                </ModalBody>\n\n                            <ModalFooter>\n            <Button color=\"primary\" onClick={this.toggle}>Do Something</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n                </p>\n          \n        </div>\n    );\n  } \n};\n\nexport default Homepage;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport \"./register.css\"\nexport default class Register extends Component {\n\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    password: \"\",\n  }\n\n  handleInputChange = (name, value) => {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    return (\n      <form className=\"register-form\" onSubmit={ e => {\n        e.preventDefault();\n        console.log(\"Submitting form! ...Allegedly\");\n\n        axios.post('/api/users', { ...this.state })\n          .then(response => console.log(response.data))\n          .catch(error => console.error(error));\n\n      }}>\n     \n      <input\n          type=\"text\"\n          name=\"firstName\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n        <input\n          type=\"text\"\n          name=\"lastName\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n        <input\n          type=\"text\"\n          name=\"username\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          onChange={ e => this.handleInputChange(e.target.name, e.target.value) }\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n//pages\nimport Homepage from './pages/home/homepage';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n    loggedIn: false,\n    newUser:  false,\n  }\n\n  render() {\n  return (\n    <Router>\n      <div>\n        \n          <Route exact path=\"/\" component={Homepage} />\n        \n      </div>\n    </Router>)\n\n    // if (this.state.loggedIn) {\n    //   return <>User Logged In!</>\n    // } else if (this.state.newUser) {\n    //   return <Register />\n    // } else {\n    //   return <Login />\n    // }\n  }\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}